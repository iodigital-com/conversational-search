@using ConversationalSearchPlatform.BackOffice.Services.Models.Statistics
@using ConversationalSearchPlatform.BackOffice.Tenants
@using Finbuckle.MultiTenant
@using ApexCharts
@using ConversationalSearchPlatform.BackOffice.Services
@inject IMultiTenantStore<ApplicationTenantInfo> TenantStore; 
@inject IStatisticsService StatisticsService;

<h3 class="my-3">
    Average conversation cost per
    @if (StatisticsDimension == StatisticsDimension.Month)
    {
        <span> month</span>
    }
    else
    {
        <span> week number</span>
    }

    @if (StatisticsUsageType == StatisticsUsageType.SingularTenant && TenantName != null)
    {
        <span> for @TenantName</span>
    }
    else
    {
        <span> for all tenants</span>
    }
</h3>
<MudStack Row="true" Class="my-3">
    <MudDateRangePicker
        @bind-DateRange="_dateRange"
        Label="Date range"
        Editable="true"/>
    <MudSelect
        @bind-Value="StatisticsDimension"
        For="@(() => StatisticsDimension)"
        T="StatisticsDimension"
        Label="Over time">
        @foreach (var sd in Enum.GetValues<StatisticsDimension>())
        {
            <MudSelectItem T="StatisticsDimension" Value="sd">@sd.ToString()</MudSelectItem>
        }
    </MudSelect>
    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="OnFilterChange">
        Change filters
    </MudButton>
</MudStack>

@if (ConversationCostReports == null)
{
    <StatisticsLoading/>
}
else if (ConversationCostReports.Count == 0)
{
    <h4 class="my-3">No results found</h4>
}
else
{
    <ApexChart TItem="ConversationCostReport"
               Title="Average conversation cost"
               Options="Options"
               @ref="Chart">
        @{
            var availableCallModels = ConversationCostReports.Select(report => report.CallModel).Distinct();
        }
        @foreach (var callModel in availableCallModels)
        {
            <ApexPointSeries TItem="ConversationCostReport"
                             Items="ConversationCostReports.Where(u => u.CallModel == callModel)"
                             Name=@($"Total cost {callModel.ToString()}")
                             SeriesType="SeriesType.Bar"
                             XValue="@(DetermineXValue())"
                             YAggregate="@(e => e.Average(ccr => ccr.TotalCostSum))"/>

            <ApexPointSeries TItem="ConversationCostReport"
                             Items="ConversationCostReports.Where(u => u.CallModel == callModel)"
                             Name=@($"Completion total cost {callModel.ToString()}")
                             SeriesType="SeriesType.Bar"
                             XValue="@(DetermineXValue())"
                             YAggregate="@(e => e.Average(ccr => ccr.CompletionCostSum))"/>

            <ApexPointSeries TItem="ConversationCostReport"
                             Items="ConversationCostReports.Where(u => u.CallModel == callModel)"
                             Name=@($"Prompting total cost {callModel.ToString()}")
                             SeriesType="SeriesType.Bar"
                             XValue="@(DetermineXValue())"
                             YAggregate="@(e => e.Average(ccr => ccr.PromptTokenCostSum))"/>
        }

    </ApexChart>
}

@code {

    [Parameter]
    public StatisticsUsageType StatisticsUsageType { get; set; }

    private StatisticsDimension StatisticsDimension { get; set; } = StatisticsDimension.Week;

    [Parameter]
    public string? TenantId { get; set; }

    private string? TenantName { get; set; }

    private ApexChart<ConversationCostReport> Chart { get; set; } = default!;
    private ApexChartOptions<ConversationCostReport> Options { get; set; } = default!;

    private MudDateRangePicker Picker { get; set; } = default!;

    private DateRange _dateRange = new(
        DateTimeOffset.UtcNow.AddMonths(-1).DateTime,
        DateTimeOffset.UtcNow.DateTime
        );

    protected override async Task OnParametersSetAsync()
    {
        await InitializeAsync();
    }

    private List<ConversationCostReport>? ConversationCostReports { set; get; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAsync();
    }

    private async Task InitializeAsync()
    {
        Options = StatisticsHelper.CreateBarChartOptions<ConversationCostReport>();
        TenantName = await StatisticsHelper.InitializeTenantName(TenantId, TenantStore);
        ConversationCostReports = await FetchDataAsync(StatisticsUsageType, TenantId, _dateRange.Start!.Value, _dateRange.End!.Value);
    }

    private async Task OnFilterChange()
    {
        ConversationCostReports = await FetchDataAsync(StatisticsUsageType, TenantId, _dateRange.Start!.Value, _dateRange.End!.Value);
        await Chart.UpdateOptionsAsync(true, true, true);
    }

    private async Task<List<ConversationCostReport>> FetchDataAsync(
        StatisticsUsageType statisticsUsageType,
        string? tenantId,
        DateTimeOffset from,
        DateTimeOffset to
        ) => statisticsUsageType switch
        {
            StatisticsUsageType.All => await StatisticsService.GetConversationCostReportForAllTenantsAsync(from, to),
            StatisticsUsageType.SingularTenant => await StatisticsService.GetConversationCostReportForTenantAsync(tenantId!, from, to),
            _ => throw new ArgumentOutOfRangeException(nameof(statisticsUsageType), statisticsUsageType, null)
            };

    private Func<ConversationCostReport, object> DetermineXValue() => StatisticsDimension == StatisticsDimension.Month
        ? e => e.Month.ToString()
        : e => e.WeekNumber.ToString();

}