@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using ConversationalSearchPlatform.BackOffice.Components.Pages.Account.Manage
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ConversationalSearchPlatform.BackOffice.Data
@using ConversationalSearchPlatform.BackOffice.Identity
@using ConversationalSearchPlatform.BackOffice.Middleware

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row align-content-center text-ce">
    <div class="">
        <section>
            <StatusMessage Message="@errorMessage"/>
            <EditForm id="account" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <h2>Please use your account to log in.</h2>
                <hr/>
                <ValidationSummary class="text-danger"/>
                <div class="form-floating mb-3">
                    <MudTextField @bind-Value="Input.Email" Label="Email" Variant="Variant.Outlined" autocomplete="username" placeholder="name@company.com" aria-required="true"></MudTextField>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <MudTextField @bind-Value="Input.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password"/>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="checkbox mb-3">
                    <div class="d-flex flex-grow-1 gap-2 align-items-center">
                        <MudCheckBox @bind-Checked="@Input.RememberMe" Color="Color.Primary"></MudCheckBox>
                        <span>Remember me</span>
                    </div>
                </div>
                <div>
                    <MudButton id="login-submit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Log in</MudButton>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    string? errorMessage;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public InputModel Input { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "";

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = null!;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        ReturnUrl ??= "/";

        if (HttpContext != null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
    // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, true);
        if (result == SignInResult.Success)
        {
            var key = Guid.NewGuid();
            BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo(user.UserName!, Input.Password, Input.RememberMe);
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo($"/login?key={key}", true);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/Account/LoginWith2fa",
                new()
                {
                    ["ReturnUrl"] = ReturnUrl,
                    ["RememberMe"] = Input.RememberMe
                });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User a1ccount locked out.");
            RedirectManager.RedirectTo("/Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

}