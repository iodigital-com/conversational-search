@page "/preferences"
@using ConversationalSearchPlatform.BackOffice.Tenants
@using Finbuckle.MultiTenant
@using ConversationalSearchPlatform.BackOffice.Models.Preferences
@using ConversationalSearchPlatform.BackOffice.Models.Tenants
@using ConversationalSearchPlatform.BackOffice.Services.Models
@using ConversationalSearchPlatform.BackOffice.Components.Pages.Preferences.ChatComponent.State
@using ConversationalSearchPlatform.BackOffice.Components.Pages.Preferences.ChatComponent;
@inject ISnackbar Snackbar;
@inject IMultiTenantStore<ApplicationTenantInfo> TenantStore; 
@inject IMultiTenantContextAccessor<ApplicationTenantInfo> TenantAccessor;
@inject ILogger<Preferences> Logger;
@rendermode InteractiveServer

@inject ChatRefreshState ChatRefreshState;

<PageTitle>Preferences</PageTitle>

<MudForm @ref="Form" @bind-IsValid="@Valid" ReadOnly="false">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Preferences</MudText>
    <MudGrid Justify="Justify.SpaceEvenly">
        <MudItem Class="flex-grow-1">
            <MudCard>
                <MudCardContent>
                    <MudTextField
                        Label="Name"
                        Class="mt-3"
                        Required
                        Disabled
                        ReadOnly
                        @bind-Value="Model.Name"
                        For="@(() => Model.Name)"/>
                    <MudTextField
                        Label="Identifier"
                        Class="mt-3"
                        Required
                        Disabled
                        ReadOnly
                        @bind-Value="Model.Identifier"
                        For="@(() => Model.Identifier)"/>
                    <MudTextField
                        Label="Base prompt"
                        Class="mt-3"
                        Required
                        Lines="6"
                        @bind-Value="Model.BasePrompt"
                        For="@(() => Model.BasePrompt)"/>
                    <MudGrid Style="align-items: center">
                        <MudItem xs="8">
                            <MudTextField
                                Label="Prompt tags"
                                Placeholder="Enter a new tag"
                                Class="mt-3"
                                @bind-Value="NewPromptTag"
                                For="@(() => NewPromptTag)"
                                HelperText="Example tag: {{make}} to designate the make of a vehicle which can then be used in the prompt as replacement for the conversation context."/>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewPromptTag">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                    @{
                        foreach (var promptTag in Model.PromptTags)
                        {
                            <MudChip OnClose="@(() => RemoveTag(promptTag.Value))" Value="@promptTag.Value">@promptTag.Value</MudChip>
                        }
                    }
                    <MudTextField
                        Label="Amount of search references"
                        Class="mt-3"
                        Required
                        InputType="InputType.Number"
                        @bind-Value="Model.AmountOfSearchReferences"
                        For="@(() => Model.AmountOfSearchReferences)"/>
                    <MudSelect
                        Label="LLM"
                        Class="mt-3"
                        Required
                        @bind-Value="Model.ChatModel"
                        For="@(() => Model.ChatModel)"
                        Margin="Margin.Dense"
                        T="ChatModel"
                        Variant="Variant.Text">
                        @{
                            foreach (ChatModel chatModel in Enum.GetValues(typeof(ChatModel)))
                            {
                                <MudSelectItem Value="@chatModel">@chatModel</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="Submit"
                               Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        Save
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudForm>

<MudDrawer @bind-Open="@DrawerOpen"
           ClipMode="DrawerClipMode.Always"
           Breakpoint="Breakpoint.None"
           Width="80%"
           Style="background-color: var(--mud-palette-surface);
            justify-content: center; border-radius: 5px 5px 5px 5px;
            -webkit-border-radius: 5px 5px 5px 5px;
            -moz-border-radius: 5px 5px 5px 5px;
            border: 1px solid #a9a9a9;
"
           PreserveOpenState="false"
           Elevation="1"
           Anchor="Anchor.Right"
           Variant="@DrawerVariant.Responsive">
    <MudPaper Class="m-3" Elevation="0">
        <MudFab Color="Color.Primary"
                Style="position:fixed; top:50px;right:5px;"
                StartIcon="@DrawerIcon"
                OnClick="@ToggleDrawer"
                Title="Try out chat"
                />
        <Chat/>
    </MudPaper>
</MudDrawer>

@code{
    private bool DrawerOpen { get; set; }
    private string DrawerIcon { get; set; } = Icons.Material.Filled.Chat;

    private void ToggleDrawer()
    {
        DrawerOpen = !DrawerOpen;
        DrawerIcon = DrawerOpen ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.Chat;
    }

    private TenantPreferenceDto Model { get; set; } = new();
    private ApplicationTenantInfo? Tenant { get; set; }
    private string? NewPromptTag { get; set; }

    private bool Valid { get; set; }

    private MudForm? Form { get; set; }

    private async Task Submit()
    {
        if (Tenant == null)
        {
            return;
        }

        if (Form == null)
        {
            return;
        }

        await Form.Validate();

        if (!Valid)
        {
            return;
        }

        var snackbarMessage = $"Successfully updated the preferences.";
        var success = false;

        try
        {
            Tenant.AmountOfSearchReferences = Model.AmountOfSearchReferences;
            Tenant.ChatModel = Model.ChatModel;
            Tenant.BasePrompt = Model.BasePrompt;
            Tenant.PromptTags = Model.PromptTags.Select(dto => new PromptTag
            {
                Value = dto.Value
            }).ToList();

            var mutatingTenantStore = TenantStore as IMutatingEFCoreFactoryCreatingStore<ApplicationTenantInfo>;
            await mutatingTenantStore!.UpdateAsync(Tenant);
            success = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Something went wrong trying to update the preferences");
            Snackbar.Add($"Something went wrong trying to execute this action.", Severity.Error);
        }

        if (success)
        {
            Snackbar.Add(snackbarMessage, Severity.Success);
            ChatRefreshState.SetNeedsRefresh();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (TenantAccessor.MultiTenantContext?.HasResolvedTenant == true)
        {
            Tenant = TenantAccessor.MultiTenantContext?.TenantInfo;

            if (Tenant != null)
            {
                Model.Identifier = Tenant.Identifier!;
                Model.Name = Tenant.Name!;
                Model.ChatModel = Tenant.ChatModel;
                Model.AmountOfSearchReferences = Tenant.AmountOfSearchReferences;
                Model.BasePrompt = Tenant.GetBasePromptOrDefault();
                Model.PromptTags = Tenant.PromptTags?.Select(tag => new PromptTagDto(tag.Value)).ToList() ?? new List<PromptTagDto>();
            }
        }
        else
        {
            Logger.LogError("Cannot resolve tenant");
        }
        await base.OnInitializedAsync();
    }

    private void AddNewPromptTag()
    {
        if (NewPromptTag != null)
        {
            Model.PromptTags.Add(new PromptTagDto(NewPromptTag));
            NewPromptTag = null;
        }
    }

    void RemoveTag(string promptTagValue)
    {
        var toRemove = Model.PromptTags.FirstOrDefault(dto => dto.Value == promptTagValue);
        if (toRemove != null)
        {
            Model.PromptTags.Remove(toRemove);
        }
    }

}