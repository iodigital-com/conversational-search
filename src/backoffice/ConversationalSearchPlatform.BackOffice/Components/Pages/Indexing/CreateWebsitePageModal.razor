@using ConversationalSearchPlatform.BackOffice.Services
@using ConversationalSearchPlatform.BackOffice.Data.Entities
@using ConversationalSearchPlatform.BackOffice.Models.Conversations
@using ConversationalSearchPlatform.BackOffice.Models.Indexing
@using ConversationalSearchPlatform.BackOffice.Services.Models
@using ConversationalSearchPlatform.BackOffice.Services.Models.Sitemap
@using ConversationalSearchPlatform.BackOffice.Tenants
@using Finbuckle.MultiTenant

@inject ISnackbar Snackbar;
@inject IIndexingService<WebsitePage> IndexingService;
@inject ISitemapParsingService SitemapParsingService;
@inject IAzureBlobStorage AzureBlobStorage;
@inject ILogger<CreateWebsitePageModal> Logger;
@inject IMultiTenantContextAccessor<ApplicationTenantInfo> TenantAccessor;
@rendermode InteractiveServer
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1"/>
            @ModalTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="Form" Model="Model" @bind-IsValid="@Valid" ReadOnly="false">
            <MudGrid Justify="Justify.SpaceEvenly">
                <MudItem Class="flex-grow-1">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField
                                Label="The name of the page"
                                Class="mt-3"
                                @bind-Value="Model.Name"
                                For="@(() => Model.Name)"/>
                            <MudStack Row="true" Spacing="3" Class="flex-wrap justify-content-between align-baseline mt-2">
                                <MudStack>
                                    <MudTextField
                                        Label="The url of the page"
                                        Class="mt-3"
                                        @bind-Value="Model.Url"
                                        OnBlur="@DiscoverSiteMapUrl"
                                        For="@(() => Model.Url)"/>
                                    @if (Model.SiteMapAvailable == true)
                                    {
                                        <div>
                                            <MudText Typo="Typo.body1">Looks like we found a sitemap on this URL. Do you want to use it?</MudText>
                                            <MudCheckBox @bind-Checked="@Model.UseUrlSiteMap" Color="Color.Primary" Label="Use the sitemap"></MudCheckBox>
                                        </div>
                                    }
                                </MudStack>
                                <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Inset" Style="height: auto"/>

                                <MudFileUpload T="IBrowserFile" Accept=".xml" bind-Files="Model.SiteMapFile" MaximumFileCount="100">
                                    <ButtonTemplate>
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                                   for="@context">
                                            Upload a sitemap
                                        </MudButton>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudStack>
                            <MudSelect
                                Required
                                Class="mt-3"
                                @bind-Value="Model.ReferenceType"
                                For="@(() => Model.ReferenceType)"
                                Margin="Margin.Dense"
                                T="ConversationReferenceTypeDto"
                                Label="Reference type"
                                Variant="Variant.Text">
                                @{
                                    foreach (ConversationReferenceTypeDto refType in Enum.GetValues(typeof(ConversationReferenceTypeDto)))
                                    {
                                        <MudSelectItem Value="@refType">@refType</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                            <MudSelect
                                Required
                                Class="mt-3"
                                @bind-Value="Model.Language"
                                For="@(() => Model.Language)"
                                Margin="Margin.Dense"
                                T="LanguageDto"
                                Label="Language"
                                Variant="Variant.Text">
                                @{
                                    foreach (LanguageDto lang in Enum.GetValues(typeof(LanguageDto)))
                                    {
                                        <MudSelectItem Value="@lang">@lang</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="Cancel">Cancel</MudButton>
                            <MudButton OnClick="ExecuteCreate"
                                       Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                                Index website page
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {


    private CreateWebsitePageDto Model { get; set; } = new();
    private SiteMapDiscoveryResult SiteMapDiscoveryResult { get; set; } = new(Enumerable.Empty<Uri>());

    private bool Valid { get; set; }
    private string ModalTitle { get; set; } = default!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public CreateWebsitePageModalProps? Props { get; set; }

    private MudForm? Form { get; set; }


    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task DiscoverSiteMapUrl()
    {
        switch (Form?.IsValid)
        {
            case true when !string.IsNullOrWhiteSpace(Model.Url):
            {
                SiteMapDiscoveryResult = await SitemapParsingService.DiscoverFromUrlAsync(Model.Url);
                Model.SiteMapAvailable = SiteMapDiscoveryResult.DiscoveredAny();
                break;
            }
            case true when string.IsNullOrWhiteSpace(Model.Url):
                SiteMapDiscoveryResult = new SiteMapDiscoveryResult(Enumerable.Empty<Uri>());
                Model.SiteMapAvailable = null;
                break;
        }
    }

    private async Task ExecuteCreate()
    {
        if (Form == null)
        {
            return;
        }

        if (Props == null)
        {
            return;
        }

        await Form.Validate();

        if (!Valid)
        {
            return;
        }

        var snackbarMessage = $"Successfully created a record for {Model.Name}";
        var success = false;

        try
        {
            await IndexAsync();
            success = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Something went wrong trying to create a record");
            Snackbar.Add($"Something went wrong trying to execute this action.", Severity.Error);
        }

        if (success)
        {
            Snackbar.Add(snackbarMessage, Severity.Success);
            if (Props.RefreshFunction != null)
            {
                await Props.RefreshFunction.Invoke();
            }
            MudDialog.Close();
        }
    }

    private async Task IndexAsync()
    {
        var url = string.Empty;
        var isSitemapParent = false;
        string? sitemapFileReference = null;
        string? sitemapFileName = null;

        if (HasUrlSiteMap())
        {
            url = SiteMapDiscoveryResult.SiteMaps.First().ToString();
            isSitemapParent = true;
            
            var stream = await SitemapParsingService.DownloadAsStreamAsync(url);
            var blobResponseDto = await AzureBlobStorage.UploadAsync(Guid.NewGuid().ToString(), stream);
            
            if (!blobResponseDto.Error)
            {
                sitemapFileReference = blobResponseDto.Blob.Uri;
                sitemapFileName = blobResponseDto.Blob.Name;
            }
        }
        else if (HasFileSitemap())
        {
            var blobResponseDto = await AzureBlobStorage.UploadAsync(Model.SiteMapFile!);

            if (!blobResponseDto.Error)
            {
                sitemapFileReference = blobResponseDto.Blob.Uri;
                sitemapFileName = blobResponseDto.Blob.Name;
            }
        }
        else if (HasDefaultUrl())
        {
            url = Model.Url;
        }


        var websitePage = new WebsitePage(
            Model.Name,
            url,
            (ReferenceType)Model.ReferenceType,
            (Language)Model.Language,
            isSitemapParent,
            sitemapFileReference,
            sitemapFileName
            );

        var tenantId = TenantAccessor.MultiTenantContext?.TenantInfo?.Id;
        if (tenantId != null)
        {
            await IndexingService.CreateAsync(websitePage, tenantId);
        }
        else
        {
            Snackbar.Add("Unable to execute action. Tenant could not be resolved", Severity.Error);
        }

    }

    private bool HasFileSitemap() => Model.SiteMapFile != null;

    private bool HasDefaultUrl() => Model.Url != null;

    private bool HasUrlSiteMap() => Model.UseUrlSiteMap && SiteMapDiscoveryResult.DiscoveredAny();

    protected override Task OnInitializedAsync()
    {
        ModalTitle = "Create website page record";
        return base.OnInitializedAsync();
    }

}